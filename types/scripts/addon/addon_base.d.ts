export class AddonAPI {
    constructor(ctx: any);
    nstructjs: typeof nstructjs;
    util: typeof util;
    vectormath: any;
    math: typeof math;
    simplemesh: typeof simplemesh;
    pathux: typeof pathux;
    mesh_utils: typeof mesh_utils;
    unwrapping: typeof unwrapping;
    sceneobject: {
        SceneObjectData: typeof SceneObjectData;
        SceneObject: typeof SceneObject;
        composeObjectMatrix: typeof composeObjectMatrix;
    };
    subsurf: {
        CubicPatch: typeof CubicPatch;
    };
    mesh: {
        CustomDataElem: typeof CustomDataElem;
        paramizer: typeof paramizer;
        displacement: typeof displacement;
        curvature: typeof curvature;
        curvature_test: typeof curvature_test;
        utils: typeof mesh_utils;
        subdivide: typeof subdivide;
        KDrawModes: {
            NO: number;
            TAN: number;
            BIN: number;
            DK1: number;
            DK2: number;
            DK3: number;
            D2K1: number;
            D2K2: number;
            D2K3: number;
            D3K1: number;
            D3K2: number;
            D3K3: number;
            ERROR: number;
            SMOOTH_TAN: number;
        };
        SmoothMemoizer: any;
        ParamizeModes: {
            SELECTED: number;
            MAX_Z: number;
        };
    };
    KeyMap: any;
    HotKey: any;
    shaders: typeof shaders;
    bvh: typeof bvh;
    bezier: typeof bezier;
    Icons: typeof Icons;
    SelMask: {
        VERTEX: mesh.MeshTypes;
        EDGE: mesh.MeshTypes;
        FACE: mesh.MeshTypes;
        HANDLE: mesh.MeshTypes;
        GEOM: number;
        SGEOM: number;
        MESH: number;
        LIGHT: number;
        CAMERA: number;
        NULLOBJECT: number;
        PROCMESH: number;
        TETMESH: number;
        STRANDS: number;
        OBJECT: number;
    };
    editor: {
        Editor: typeof Editor;
        VelPan: typeof VelPan;
        VelPanFlags: {
            UNIFORM_SCALE: number;
        };
        DataBlockBrowser: typeof DataBlockBrowser;
        DirectionChooser: typeof DirectionChooser;
        EditorSideBar: typeof EditorSideBar;
        makeDataBlockBrowser: typeof makeDataBlockBrowser;
        MeshMaterialChooser: typeof MeshMaterialChooser;
        MeshMaterialPanel: typeof MeshMaterialPanel;
        NewDataBlockOp: typeof NewDataBlockOp;
        getContextArea: (cls: any) => any;
    };
    widget3d: {
        TransformWidget: typeof TransformWidget;
    };
    toolmode: {
        ToolMode: typeof ToolMode;
        MeshToolBase: typeof MeshToolBase;
        MeshEditor: typeof MeshEditor;
    };
    toolop: {
        ToolOp: typeof ToolOp;
        ToolProperty: typeof ToolProperty;
        IntProperty: typeof IntProperty;
        FloatProperty: typeof FloatProperty;
        StringProperty: typeof StringProperty;
        EnumProperty: typeof EnumProperty;
        FlagProperty: typeof FlagProperty;
        Vec2Property: typeof Vec2Property;
        Vec3Property: typeof Vec3Property;
        Vec4Property: typeof Vec4Property;
        Mat4Property: any;
        DataRefProperty: typeof DataRefProperty;
        DataRefListProperty: typeof DataRefListProperty;
        MeshOp: typeof MeshOp;
        MeshDeformOp: typeof MeshDeformOp;
        MeshOpBaseUV: typeof MeshOpBaseUV;
        TransformOp: typeof TransformOp;
        BoolProperty: typeof BoolProperty;
    };
    graph: {
        Node: typeof graph.Node;
        Graph: typeof graph.Graph;
        NodeSocketType: typeof graph.NodeSocketType;
    };
    addon: any;
    classes: {};
    _graphNodes: Set<any>;
    lib_api: {
        DataBlock: {
            new (): {
                swapDataBlockContents(obj: any): any;
                graphDisplayName(): any;
                lib_userData: {};
                lib_id: number;
                name: any;
                lib_flag: any;
                lib_icon: any;
                lib_type: any;
                lib_users: number;
                lib_external_ref: any;
                lib_userlist: any[];
                copy(addLibUsers: boolean, owner: any): any;
                destroy(): void;
                copyTo(b: any, copyContents?: boolean): void;
                dataLink(getblock: any, getblock_addUser: any): void;
                _validate_userlist(): void;
                lib_getUsers(): any[];
                lib_addUser(user: any): void;
                lib_remUser(user: any): void;
                afterSTRUCT(): void;
                loadSTRUCT(reader: any): void;
                [Symbol.keystr](): number;
                graph_uiname: any;
                graph_name: any;
                graph_ui_pos: pathux.Vector2;
                graph_ui_size: pathux.Vector2;
                graph_ui_flag: number;
                graph_id: number;
                graph_graph: any;
                graph_flag: number;
                inputs: {};
                outputs: {};
                icon: number;
                readonly allsockets: Generator<any, void, unknown>;
                graphDataLink(ownerBlock: any, getblock: any, getblock_addUser: any): void;
                exec(state: any): void;
                update(): any;
                graphDestroy(): void;
                graphUpdate(): any;
                _save_map(map: any): graph.KeyValPair[];
            };
            register(cls: any): void;
            STRUCT: string;
            blockDefine(): {
                typeName: string;
                defaultName: string;
                uiName: string;
                flag: number;
                icon: number;
            };
            unregister(cls: any): void;
            getClass(typeName: any): any;
            graphDefineAPI(api: any, nodeStruct: any): void;
            defineAPI(api: any, nodeStruct: any): void;
            getFinalNodeDef(): {
                name: any;
                uiname: any;
                flag: any;
                inputs: any;
                outputs: any;
            };
            nodedef(): {
                name: string;
                uiname: string;
                flag: number;
                inputs: {};
                outputs: {};
            };
            inherit(obj?: {}): {
                data: any;
            };
        };
        DataRef: typeof DataRef;
        DataRefProperty: typeof DataRefProperty;
        DataRefListProperty: typeof DataRefListProperty;
    };
    get argv(): any;
    get ctx(): any;
    register(cls: any): void;
    graphConnect(src: any, output: any, dst: any, input: any): void;
    onNewFilePost(): void;
    onNewFilePre(): void;
    graphAdd(node: any): void;
    graphRemove(node: any): void;
    unregister(cls: any): void;
    unregisterAll(): this;
}
import { nstructjs } from '../path.ux/scripts/pathux.js';
import { util } from '../path.ux/scripts/pathux.js';
import { math } from '../path.ux/scripts/pathux.js';
import * as simplemesh from '../core/simplemesh.js';
import * as pathux from '../path.ux/scripts/pathux.js';
import * as mesh_utils from '../mesh/mesh_utils.js';
import * as unwrapping from '../mesh/unwrapping.js';
import { SceneObjectData } from '../sceneobject/sceneobject_base.js';
import { SceneObject } from '../sceneobject/sceneobject.js';
import { composeObjectMatrix } from '../sceneobject/sceneobject.js';
import { CubicPatch } from '../subsurf/subsurf_patch.js';
import { CustomDataElem } from '../mesh/customdata.js';
import * as paramizer from '../mesh/mesh_paramizer.js';
import * as displacement from '../mesh/mesh_displacement.js';
import * as curvature from '../mesh/mesh_curvature.js';
import * as curvature_test from '../mesh/mesh_curvature_test.js';
import * as subdivide from '../mesh/mesh_subdivide.js';
import * as shaders from '../shaders/shaders.js';
import * as bvh from '../util/bvh.js';
import * as bezier from '../util/bezier.js';
import { Icons } from '../editors/icon_enum.js';
import * as mesh from '../mesh/mesh.js';
import { Editor } from '../editors/editor_base.js';
import { VelPan } from '../editors/editor_base.js';
import { DataBlockBrowser } from '../editors/editor_base.js';
import { DirectionChooser } from '../editors/editor_base.js';
import { EditorSideBar } from '../editors/editor_base.js';
import { makeDataBlockBrowser } from '../editors/editor_base.js';
import { MeshMaterialChooser } from '../editors/editor_base.js';
import { MeshMaterialPanel } from '../editors/editor_base.js';
import { NewDataBlockOp } from '../editors/editor_base.js';
import { TransformWidget } from '../editors/view3d/widgets/widget_tools.js';
import { ToolMode } from '../editors/view3d/view3d_toolmode.js';
import { MeshToolBase } from '../editors/view3d/tools/meshtool.js';
import { MeshEditor } from '../editors/view3d/tools/mesheditor.js';
import { ToolOp } from '../path.ux/scripts/pathux.js';
import { ToolProperty } from '../path.ux/scripts/pathux.js';
import { IntProperty } from '../path.ux/scripts/pathux.js';
import { FloatProperty } from '../path.ux/scripts/pathux.js';
import { StringProperty } from '../path.ux/scripts/pathux.js';
import { EnumProperty } from '../path.ux/scripts/pathux.js';
import { FlagProperty } from '../path.ux/scripts/pathux.js';
import { Vec2Property } from '../path.ux/scripts/pathux.js';
import { Vec3Property } from '../path.ux/scripts/pathux.js';
import { Vec4Property } from '../path.ux/scripts/pathux.js';
import { DataRefProperty } from '../core/lib_api.js';
import { DataRefListProperty } from '../core/lib_api.js';
import { MeshOp } from '../mesh/mesh_ops_base.js';
import { MeshDeformOp } from '../mesh/mesh_ops_base.js';
import { MeshOpBaseUV } from '../mesh/mesh_uvops_base.js';
import { TransformOp } from '../editors/view3d/transform/transform_ops.js';
import { BoolProperty } from '../path.ux/scripts/pathux.js';
import * as graph from '../core/graph.js';
import { DataRef } from '../core/lib_api.js';
