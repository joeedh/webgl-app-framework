export function formatLines(s: any, line: number, lexpos: number, col: any, count?: number): string;
export function pushParseState(source: any, filename: string, parser: any, preprocessed: any): ParseState;
export function popParseState(): void;
export function genLibraryCode(): string;
export const opnames: {
    "*": string;
    "/": string;
    "-": string;
    "+": string;
    "%": string;
    "!=": string;
    "==": string;
    ">=": string;
    "<=": string;
    ">": string;
    "<": string;
    "^": string;
    "&": string;
    "|": string;
    "+=": string;
    "-=": string;
    "*=": string;
    "/=": string;
    "&=": string;
    "|=": string;
    "^=": string;
};
export class ParseState {
    constructor(source: any, filename: string, parser: any, preprocessed?: string);
    parser: any;
    lexer: any;
    throwError: boolean | Document;
    temp_idgen: number;
    preprocessed: string;
    poly_namemap: {};
    poly_keymap: {};
    scope: {};
    localScope: {};
    scopestack: any[];
    types: {};
    inputs: {};
    outputs: {};
    uniforms: {};
    functions: {};
    source: any;
    filename: string;
    builtinFuncs: Set<string>;
    get col(): number;
    get lexpos(): any;
    get line(): any;
    newTempId(): string;
    placeVarDecl(n: any, type: any, name?: string, ...args: any[]): any;
    addPolyFunc(name: any, rtype: any, args: any, type2: any): void;
    addFunc(name: any, rtype: any, args: any, key?: any): void;
    copy(): ParseState;
    buildPolyKey(name: any, rtype: any, args: any, type2: any): string;
    resetScopeStack(): this;
    reset(): this;
    constructors: {};
    error(node: any, msg: any): void;
    getType(name: any): any;
    setReturnType(t: any): void;
    getReturnType(t: any): any;
    setScope(k: any, v: any): void;
    resolveType(t: any, ...args: any[]): any;
    typesEqual(a: any, b: any, ...args: any[]): boolean;
    getScope(k: any): any;
    hasType(name: any): boolean;
    addType(type: any, name: any): any;
    pushScope(): void;
    popScope(): void;
}
export let state: ParseState;
export const libraryCode: string;
